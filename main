#include "main.h"
#include "stm32f1xx.h"

static volatile uint32_t timestamp = 0;   

uint8_t NUM = 0x00;
uint8_t OTV = 0xFF;
static uint8_t otv[26];


void init();
void delay(uint32_t ms);


int main()
{
  init();
while (1)
{
  GPIOC->ODR &= ~(1<<4);
  while(!(USART1->SR & USART_SR_RXNE)) {}
  NUM = USART1->DR;
  if (NUM==0xAA)
  {    
    if ((GPIOB->ODR & 0x2)==0)
    {
      GPIOB->ODR |= (1<<1);
      GPIOC->ODR |= (1<<4);
      
      while ((GPIOA->IDR & 0x10) > 0)
      {
        
      }

    }
    else {
      
      GPIOB->ODR &= ~(1<<1);
      GPIOC->ODR |= (1<<4);
      while ((GPIOA->IDR & 0x10) > 0)
      {
        
      }

    }
    
    ////GPIOB->ODR |= (1<<1);
    USART1->DR=OTV;}
    
  
/*  else if (NUM==0xBB){
 
    GPIOB->ODR &= ~(1<<1);
    USART1->DR=OTV;
     
  }*/
  else 
    USART1->DR=0xEE;

 
}

}



void init()
{
RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 

RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;

GPIOA->CRH &= (~GPIO_CRH_CNF9_0);
GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9);

GPIOA->CRH &= (~GPIO_CRH_CNF10_0);
GPIOA->CRH |= GPIO_CRH_CNF10_1;
GPIOA->CRH &= (~(GPIO_CRH_MODE10));
GPIOA->BSRR |= GPIO_ODR_ODR10;

USART1->CR1 = USART_CR1_UE; 

USART1->BRR = 833;

USART1->CR1 |= USART_CR1_TE | USART_CR1_RE ;
USART1->CR2 = 0;
USART1->CR3 = 0;

/////////////////////
RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;

GPIOB->CRL &= ~(0xF<<(1<<2));
GPIOB->CRL |= 3<<(1<<2);;

///////////////////////
RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;

GPIOC->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
GPIOC->CRL |= (0x02 << GPIO_CRL_MODE4_Pos) | (0x00 << GPIO_CRL_CNF4_Pos);

GPIOA->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
GPIOA->CRL |= (0x00 << GPIO_CRL_MODE4_Pos) | (0x01 << GPIO_CRL_CNF4_Pos);
}



/////////////
void delay(uint32_t ms)
{
  timestamp = ms;
  while (timestamp)
  {}
}   

void SysTick_Handler()
{
  if (timestamp)
  {
    timestamp --;
  }
}

//////////////
